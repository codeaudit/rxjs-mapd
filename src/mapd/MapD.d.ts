//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import { TTransport, TProtocol, TProtocolConstructor } from 'thrift';
import {
    TRow, TPixel, TDBInfo, TStringRow, TDeviceType, TTableType, TCopyParams, TStepResult, TColumnType, TInsertData, TQueryResult,
    TPixelResult, TExecuteMode, TPendingQuery, TDataFrame, TRenderResult, TFrontendView, TDetectResult, TImportStatus,
    TServerStatus, TTableDetails, TMemorySummary, TPixelRowResult, TRawPixelDataResult, TPixelTableRowResult,
} from './mapd_types';

declare module './MapD' {
    type TNodeCallback<T> = (err: any, result?: T) => void;
    class Client {

        public _seqid: number;
        public output: TTransport;
        public pClass: TProtocolConstructor;
        public _reqs: { [k: number]: TNodeCallback<any> };

        seqid(): number;
        new_seqid(): number;

        constructor(transport: TTransport, protocol?: TProtocol);

        connect(user: string, passwd: string, dbname: string, callback: TNodeCallback<string>): void;
        disconnect(session: string, callback: TNodeCallback<void>): void;
        get_server_status(session: string, callback: TNodeCallback<TServerStatus>): void;
        get_tables(session: string, callback: TNodeCallback<string[]>): void;
        get_table_details(session: string, table_name: string, callback: TNodeCallback<TTableDetails>): void;
        get_users(session: string, callback: TNodeCallback<string[]>): void;
        get_databases(session: string, callback: TNodeCallback<TDBInfo[]>): void;
        get_version(callback: TNodeCallback<string>): void;
        start_heap_profile(session: string, callback: TNodeCallback<void>): void;
        stop_heap_profile(session: string, callback: TNodeCallback<void>): void;
        get_heap_profile(session: string, callback: TNodeCallback<string>): void;
        get_memory_gpu(session: string, callback: TNodeCallback<string>): void;
        get_memory_cpu(session: string, callback: TNodeCallback<string>): void;
        get_memory_summary(session: string, callback: TNodeCallback<TMemorySummary>): void;
        clear_cpu_memory(session: string, callback: TNodeCallback<void>): void;
        clear_gpu_memory(session: string, callback: TNodeCallback<void>): void;
        sql_execute(session: string, query: string, column_format: boolean, nonce: string, first_n: number, callback: TNodeCallback<TQueryResult>): void;
        sql_execute_df(session: string, query: string, device_type: TDeviceType, device_id: number, first_n: number, callback: TNodeCallback<TDataFrame>): void;
        // Same as `sql_execute_df` with TDeviceType.GPU
        // sql_execute_gdf(session: string, query: string, device_id: number, first_n: number, callback: TNodeCallback<TDataFrame>): void;
        interrupt(session: string, callback: TNodeCallback<void>): void;
        sql_validate(session: string, query: string, callback: TNodeCallback<{ [k: string]: TColumnType; }>): void;
        set_execution_mode(session: string, mode: TExecuteMode, callback: TNodeCallback<void>): void;
        render_vega(session: string, widget_id: number, vega_json: string, compression_level: number, nonce: string, callback: TNodeCallback<TRenderResult>): void;
        get_result_row_for_pixel(session: string, widget_id: number, pixel: TPixel, table_col_names: { [k: string]: string[]; }, column_format: boolean, pixelRadius: number, nonce: string, callback: TNodeCallback<TPixelTableRowResult>): void;
        get_frontend_view(session: string, view_name: string, callback: TNodeCallback<TFrontendView>): void;
        get_frontend_views(session: string, callback: TNodeCallback<TFrontendView[]>): void;
        create_frontend_view(session: string, view_name: string, view_state: string, image_hash: string, view_metadata: string, callback: TNodeCallback<void>): void;
        delete_frontend_view(session: string, view_name: string, callback: TNodeCallback<void>): void;
        get_link_view(session: string, link: string, callback: TNodeCallback<TFrontendView>): void;
        create_link(session: string, view_state: string, view_metadata: string, callback: TNodeCallback<string>): void;
        load_table_binary(session: string, table_name: string, rows: TRow[], callback: TNodeCallback<void>): void;
        load_table(session: string, table_name: string, rows: TStringRow[], callback: TNodeCallback<void>): void;
        detect_column_types(session: string, file_name: string, copy_params: TCopyParams, callback: TNodeCallback<TDetectResult>): void;
        create_table(session: string, table_name: string, row_desc: TColumnType[], table_type: TTableType, callback: TNodeCallback<void>): void;
        import_table(session: string, table_name: string, file_name: string, copy_params: TCopyParams, callback: TNodeCallback<void>): void;
        import_geo_table(session: string, table_name: string, file_name: string, copy_params: TCopyParams, row_desc: TColumnType[], callback: TNodeCallback<void>): void;
        import_table_status(session: string, import_id: string, callback: TNodeCallback<TImportStatus>): void;
        start_query(session: string, query_ra: string, just_explain: boolean, callback: TNodeCallback<TPendingQuery>): void;
        execute_first_step(pending_query: TPendingQuery, callback: TNodeCallback<TStepResult>): void;
        broadcast_serialized_rows(serialized_rows: string, row_desc: TColumnType[], query_id: number, callback: TNodeCallback<void>): void;
        render_vega_raw_pixels(session: string, widget_id: number, node_idx: number, vega_json: string, callback: TNodeCallback<TRawPixelDataResult>): void;
        insert_data(session: string, insert_data: TInsertData, callback: TNodeCallback<void>): void;
        // DEPRECATED, DON'T INCLUDE
        // get_table_descriptor(session: string, table_name: string, callback: TNodeCallback<{ [k: string]: TColumnType; }>): void;
        // get_row_descriptor(session: string, table_name: string, callback: TNodeCallback<TColumnType[]>): void;
        // render(session: string, query: string, render_type: string, nonce: string, callback: TNodeCallback<TRenderResult>): void;
        // get_rows_for_pixels(session: string, widget_id: number, pixels: TPixel[], table_name: string, col_names: string[], column_format: boolean, nonce: string, callback: TNodeCallback<TPixelResult>): void;
        // get_row_for_pixel(session: string, widget_id: number, pixel: TPixel, table_name: string, col_names: string[], column_format: boolean, pixelRadius: number, nonce: string, callback: TNodeCallback<TPixelRowResult>): void;
    }
}
